{"ast":null,"code":"import { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCESS, LOGIN_FAIL, LOGOUT_SUCESS, REGISTER_SUCESS, REGISTER_FAIL } from \"./types\";\nimport Axios from \"axios\";\nimport { returnErrors } from \"./errorAction\"; //check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({\n    type: USER_LOADING\n  });\n  Axios.get(\"/api/auth/user\", tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //REgister user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  //Header\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  console.log(body);\n  Axios.post(\"/api/users\", body, config).then(res => dispatch({\n    type: REGISTER_SUCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; //login user\n\nexport const registelogin = ({\n  email,\n  password\n}) => dispatch => {\n  //Header\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n  Axios.post(\"/api/\", body, config).then(res => dispatch({\n    type: REGISTER_SUCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Logout User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCESS\n  };\n};\nexport const tokenConfig = getState => {\n  //Get token from local storage\n  const token = getState().auth.token; //Header\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["E:/MERN/project1/client/src/actions/authAction.js"],"names":["USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCESS","LOGIN_FAIL","LOGOUT_SUCESS","REGISTER_SUCESS","REGISTER_FAIL","Axios","returnErrors","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","console","log","post","registelogin","logout","token","auth"],"mappings":"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","sourcesContent":["import {\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCESS,\r\n  REGISTER_SUCESS,\r\n  REGISTER_FAIL\r\n} from \"./types\";\r\nimport Axios from \"axios\";\r\nimport { returnErrors } from \"./errorAction\";\r\n\r\n//check token and load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  //user loading\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  Axios.get(\"/api/auth/user\", tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};\r\n\r\n//REgister user\r\nexport const register = ({ name, email, password }) => dispatch => {\r\n  //Header\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ name, email, password });\r\n  console.log(body);\r\n\r\n  Axios.post(\"/api/users\", body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: REGISTER_SUCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n//login user\r\nexport const registelogin = ({ email, password }) => dispatch => {\r\n  //Header\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n  console.log(body);\r\n\r\n  Axios.post(\"/api/\", body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: REGISTER_SUCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\r\n      );\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n\r\n\r\n// Logout User\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT_SUCESS\r\n  };\r\n};\r\n\r\nexport const tokenConfig = getState => {\r\n  //Get token from local storage\r\n  const token = getState().auth.token;\r\n\r\n  //Header\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}