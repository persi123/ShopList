{"version":3,"sources":["Component/AppNavbar.js","actions/itemAction.js","actions/types.js","Component/ShoppingList.js","reducers/itemReducer.js","reducers/index.js","store.js","Component/itemModel.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggel","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","addItem","name","dispatch","Axios","post","then","res","type","item","data","setItemsLoading","ShoppingList","props","getItems","id","deleteItem","prompt","console","log","items","ListGroup","TransitionGroup","map","_id","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","DeleteHandler","connect","get","payload","delete","DataId","initialState","loading","combineReducers","action","filter","middelware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","itemModel","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","uuid","style","marginBottom","Modal","toggle","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d1626158.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container\r\n} from \"reactstrap\";\r\n\r\nexport default class AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  toggel = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n          <Container>\r\n            <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggel} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                  <NavLink href=\"http://github.com\">Github </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { GET_ITEMS, ADD_ITEMS, DELETE_ITEMS, ITEMS_LOADING } from \"./types\";\r\nimport Axios from \"axios\";\r\n//import { dispatch } from \"redux\";\r\n\r\nexport const getItems = () => dispatch => {\r\n  dispatch(setItemsLoading());\r\n  Axios.get(\"/api/items\").then(res =>\r\n    dispatch({\r\n      type: GET_ITEMS,\r\n      payload: res.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const addItem = name => dispatch => {\r\n  Axios.post(\"/api/items\", name).then(res =>\r\n    dispatch({\r\n      type: ADD_ITEMS,\r\n      item: res.data\r\n    })\r\n  );\r\n};\r\nexport const deleteItem = id => dispatch => {\r\n  Axios.delete(`/api/items/${id}`).then(res =>\r\n    dispatch({\r\n      type: DELETE_ITEMS,\r\n      DataId: id\r\n    })\r\n  );\r\n  // return {\r\n  //   type: DELETE_ITEMS,\r\n  //   DataId: id\r\n  // };\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING\r\n  };\r\n};\r\n","export const GET_ITEMS = \"GET_ITEMS\";\r\nexport const ADD_ITEMS = \"ADD_ITEMS\";\r\nexport const DELETE_ITEMS = \"DELETE_ITEMS\";\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";\r\n","import React, { Component } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\r\nimport uuid from \"uuid\";\r\nimport { connect } from \"react-redux\";\r\nimport { getItems, deleteItem, addItem } from \"../actions/itemAction\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ShoppingList extends Component {\r\n  componentDidMount() {\r\n    this.props.getItems();\r\n  }\r\n\r\n  DeleteHandler(id) {\r\n    this.props.deleteItem(id);\r\n  }\r\n\r\n  AddItem() {\r\n    const name = prompt(\"enter name\");\r\n    console.log(name);\r\n    if (name) {\r\n      this.props.addItem(name);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.props.item;\r\n\r\n    return (\r\n      <Container>\r\n        {/* <Button\r\n          color=\"dark\"\r\n          style={{ marginBottom: \"2rem\" }}\r\n          onClick={this.AddItem}\r\n        >\r\n          AddItem\r\n        </Button> */}\r\n\r\n        <ListGroup>\r\n          <TransitionGroup className=\"shopping-list\">\r\n            {items.map(({ _id, name }) => (\r\n              <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                <ListGroupItem>\r\n                  <Button\r\n                    className=\"remove-btn\"\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    onClick={() => this.DeleteHandler(_id)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                  {name}\r\n                </ListGroupItem>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </ListGroup>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n// ShoppingList.propotype = {\r\n//   getItems: PropTypes.func.isRequired,\r\n//   item: PropTypes.object.isRequired\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  item: state.item\r\n});\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     PostData: data => dispatch(RecivingData(data)),\r\n//     Delete: Postid => dispatch(DeletePost(Postid))\r\n//   };\r\n// };\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem, addItem })(\r\n  ShoppingList\r\n);\r\n","import uuid from \"uuid\";\r\nimport {\r\n  GET_ITEMS,\r\n  ADD_ITEMS,\r\n  DELETE_ITEMS,\r\n  ITEMS_LOADING\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false\r\n      };\r\n    case DELETE_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter(item => item._id !== action.DataId)\r\n      };\r\n    case ADD_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: [...state.items, action.item]\r\n      };\r\n    case ITEMS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport itemReducer from \"./itemReducer\";\r\n\r\nexport default combineReducers({\r\n  item: itemReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst initialState = {};\r\n\r\nconst middelware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middelware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  input,\r\n  Input\r\n} from \"reactstrap\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../actions/itemAction\";\r\nimport uuid from \"uuid\";\r\nclass itemModel extends Component {\r\n  state = {\r\n    modal: false,\r\n    name: \" \"\r\n  };\r\n  toggel = () => {\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const newItem = {\r\n      id: uuid(),\r\n      name: this.state.name\r\n    };\r\n\r\n    this.props.addItem(newItem);\r\n\r\n    this.toggel();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          color=\"dark\"\r\n          style={{ marginBottom: \"2rem\" }}\r\n          onClick={this.toggel}\r\n        >\r\n          AddItem\r\n        </Button>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggel}>\r\n          <ModalHeader toggle={this.toggel}>Add To Shopping List</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"item\">Item</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"item\"\r\n                  placeholder=\"Add shopping item \"\r\n                  onChange={this.onChange}\r\n                ></Input>\r\n                <Button color=\"dark\" style={{ marginTop: \"2rem\" }} block>\r\n                  AddItem\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { addItem })(itemModel);\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport AppNavbar from \"./Component/AppNavbar\";\nimport ShoppingList from \"./Component/ShoppingList\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport ItemModal from \"./Component/itemModel\";\nimport { Container } from \"reactstrap\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}